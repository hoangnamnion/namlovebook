document.addEventListener('DOMContentLoaded', () => {
    const puzzleContainer = document.getElementById('puzzleContainer');
    const solvedOverlay = document.getElementById('solvedOverlay');
    const imageSrc = 'https://img.upanh.tv/2025/06/02/f0b8cb70888295558883c2143e543cc6.jpg'; // S·ª≠ d·ª•ng ·∫£nh g·ªëc m·ªõi nh·∫•t
    const rows = 3;
    const cols = 3;
    const totalPieces = rows * cols;
    let pieces = [];
    let currentDraggingPiece = null;

    // T·∫°o c√°c m·∫£nh gh√©p t·ª´ ·∫£nh g·ªëc
    function createPieces() {
        pieces = [];
        puzzleContainer.innerHTML = ''; // X√≥a c√°c m·∫£nh gh√©p c≈© n·∫øu c√≥

        for (let i = 0; i < totalPieces; i++) {
            const piece = document.createElement('div');
            piece.classList.add('puzzle-piece');
            piece.setAttribute('data-index', i); // L∆∞u tr·ªØ v·ªã tr√≠ ƒë√∫ng c·ªßa m·∫£nh gh√©p

            const row = Math.floor(i / cols);
            const col = i % cols;

            // T√≠nh to√°n background-position ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng ph·∫ßn ·∫£nh
            const bgX = (col / (cols - 1)) * 100; // V·ªã tr√≠ X c·ªßa background trong m·∫£nh gh√©p
            const bgY = (row / (rows - 1)) * 100; // V·ªã tr√≠ Y c·ªßa background trong m·∫£nh gh√©p

            piece.style.backgroundImage = `url(${imageSrc})`;
            piece.style.backgroundSize = `${cols * 100}% ${rows * 100}%`; // Ph√≥ng to background ƒë·ªÉ ph·ªß k√≠n l∆∞·ªõi 3x3
            piece.style.backgroundPosition = `${bgX}% ${bgY}%`;

            pieces.push(piece);
            puzzleContainer.appendChild(piece);
        }
         // K√≠ch th∆∞·ªõc container s·∫Ω ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi CSS grid v√† aspect-ratio
         // Kh√¥ng c·∫ßn ƒë·∫∑t width/height c·ªë ƒë·ªãnh ·ªü ƒë√¢y

        // ·∫®n m·∫£nh gh√©p cu·ªëi c√πng ƒë·ªÉ t·∫°o kho·∫£ng tr·ªëng (t√πy ch·ªçn cho puzzle classic)
        // pieces[totalPieces - 1].style.visibility = 'hidden';
    }

     // C·∫≠p nh·∫≠t v·ªã tr√≠ hi·ªÉn th·ªã c·ªßa c√°c m·∫£nh gh√©p d·ª±a tr√™n th·ª© t·ª± trong m·∫£ng 'pieces'
     // Khi s·ª≠ d·ª•ng position: absolute, c·∫ßn c·∫≠p nh·∫≠t top/left
    function updatePiecePositions() {
        const containerRect = puzzleContainer.getBoundingClientRect();
        const pieceWidth = containerRect.width / cols;
        const pieceHeight = containerRect.height / rows;

        pieces.forEach((piece, index) => {
            const row = Math.floor(index / cols);
            const col = index % cols;
            piece.style.position = 'absolute'; // ƒê·∫£m b·∫£o position l√† absolute
            piece.style.left = `${col * pieceWidth}px`;
            piece.style.top = `${row * pieceHeight}px`;
            piece.style.width = `${pieceWidth}px`; // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc khi c·∫ßn
            piece.style.height = `${pieceHeight}px`;
        });
    }

    // X√°o tr·ªôn c√°c m·∫£nh gh√©p
    function shufflePieces(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]]; // Ho√°n ƒë·ªïi v·ªã tr√≠ trong m·∫£ng
        }
        updatePiecePositions(); // C·∫≠p nh·∫≠t v·ªã tr√≠ hi·ªÉn th·ªã sau khi x√°o tr·ªôn
    }

    // Ki·ªÉm tra xem tr√≤ ch∆°i ƒë√£ ho√†n th√†nh ch∆∞a
    function checkWin() {
        for (let i = 0; i < totalPieces; i++) {
             // Ki·ªÉm tra ch·ªâ s·ªë ban ƒë·∫ßu (data-index) c·ªßa m·∫£nh gh√©p ·ªü v·ªã tr√≠ hi·ªán t·∫°i trong m·∫£ng
             // So s√°nh th·ª© t·ª± hi·ªán t·∫°i trong m·∫£ng (i) v·ªõi data-index c·ªßa m·∫£nh gh√©p t·∫°i v·ªã tr√≠ ƒë√≥
            if (pieces[i].getAttribute('data-index') != i) {
                return false;
            }
        }
        return true;
    }

    // Hi·ªÉn th·ªã overlay khi ho√†n th√†nh
    function showSolvedOverlay() {
        solvedOverlay.classList.add('visible');
         // Th√™m event listener cho n√∫t ƒë√≥ng khi overlay hi·ªÉn th·ªã
         const closeButton = document.getElementById('closeOverlayButton');
         if (closeButton) {
             closeButton.addEventListener('click', hideSolvedOverlay);
         }
         startCelebration(); // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng ch√∫c m·ª´ng
    }

    // ·∫®n overlay
    function hideSolvedOverlay() {
        solvedOverlay.classList.remove('visible');
         // X√≥a event listener ƒë·ªÉ tr√°nh tr√πng l·∫∑p n·∫øu overlay hi·ªÉn th·ªã l·∫°i
         const closeButton = document.getElementById('closeOverlayButton');
         if (closeButton) {
             closeButton.removeEventListener('click', hideSolvedOverlay);
         }
         stopCelebration(); // D·ª´ng hi·ªáu ·ª©ng ch√∫c m·ª´ng khi ƒë√≥ng overlay
    }

    let celebrationInterval = null;
    const celebrationElements = ['‚ú®', 'üíñ', ' confetti', 'üéâ', 'üå∏']; // C√°c bi·ªÉu t∆∞·ª£ng/emoji ch√∫c m·ª´ng

    // T·∫°o m·ªôt ph·∫ßn t·ª≠ ch√∫c m·ª´ng r∆°i xu·ªëng
    function createCelebrationElement() {
        const element = document.createElement('div');
        element.classList.add('celebration-element');
        const emoji = celebrationElements[Math.floor(Math.random() * celebrationElements.length)];
        element.innerHTML = emoji.trim(); // S·ª≠ d·ª•ng trim() ƒë·ªÉ lo·∫°i b·ªè kho·∫£ng tr·∫Øng n·∫øu c√≥
        if (emoji.trim() === 'confetti') { // V√≠ d·ª•: n·∫øu mu·ªën d√πng style kh√°c cho confetti
             // C√≥ th·ªÉ th√™m class ho·∫∑c style ri√™ng t·∫°i ƒë√¢y n·∫øu c·∫ßn
             element.style.backgroundColor = `#${Math.floor(Math.random()*16777215).toString(16)}`; // M√†u ng·∫´u nhi√™n cho confetti gi·∫£
             element.style.width = '10px';
             element.style.height = '10px';
             element.style.borderRadius = '50%';
             element.style.fontSize = '0.1em'; // Gi·∫£m font size cho ch·∫•m m√†u
             element.innerHTML = ''; // X√≥a emoji n·∫øu d√πng ch·∫•m m√†u
        }

        // Randomize starting horizontal position
        const startX = Math.random() * window.innerWidth;
        element.style.left = `${startX}px`;

        // Randomize animation duration and delay
        const duration = Math.random() * 3 + 3; // Duration between 3 and 6 seconds
        element.style.animationDuration = `${duration}s`;
        const delay = Math.random() * 1; // Delay between 0 and 1 seconds
        element.style.animationDelay = `-${delay}s`; // Use negative delay
        element.style.opacity = 0; // B·∫Øt ƒë·∫ßu v·ªõi opacity 0 ƒë·ªÉ animation opacity ho·∫°t ƒë·ªông

        document.body.appendChild(element);

        // Remove element after animation ends
        element.addEventListener('animationend', () => {
            element.remove();
        });
    }

    // B·∫Øt ƒë·∫ßu t·∫°o hi·ªáu ·ª©ng ch√∫c m·ª´ng
    function startCelebration() {
        // T·∫°o m·ªôt v√†i ph·∫ßn t·ª≠ ban ƒë·∫ßu
        for(let i = 0; i < 20; i++) {
            createCelebrationElement();
        }
        // Ti·∫øp t·ª•c t·∫°o ph·∫ßn t·ª≠ theo kho·∫£ng th·ªùi gian
        celebrationInterval = setInterval(createCelebrationElement, 100); // T·∫°o m·ªõi m·ªói 100ms
    }

    // D·ª´ng t·∫°o hi·ªáu ·ª©ng ch√∫c m·ª´ng v√† x√≥a c√°c ph·∫ßn t·ª≠ ƒëang r∆°i
    function stopCelebration() {
        clearInterval(celebrationInterval);
        const elements = document.querySelectorAll('.celebration-element');
        elements.forEach(el => el.remove());
    }

    // Th√™m s·ª± ki·ªán k√©o th·∫£
    function addDragListeners() {
        pieces.forEach(piece => {
            // Ki·ªÉm tra xem m·∫£nh gh√©p c√≥ b·ªã ·∫©n (kho·∫£ng tr·ªëng) kh√¥ng tr∆∞·ªõc khi th√™m listener
            // if (piece.style.visibility !== 'hidden') {
                piece.addEventListener('mousedown', onMouseDown);
                piece.addEventListener('touchstart', onTouchStart, { passive: false });
            // }
        });

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);

        document.addEventListener('touchmove', onTouchMove, { passive: false });
        document.addEventListener('touchend', onTouchEnd);
        document.addEventListener('touchcancel', onTouchEnd); // X·ª≠ l√Ω khi ch·∫°m b·ªã h·ªßy
    }

    let offsetX, offsetY;

    function onMouseDown(e) {
        if (e.button !== 0) return; // Ch·ªâ x·ª≠ l√Ω click tr√°i chu·ªôt
         // e.target c√≥ th·ªÉ l√† <img> n·∫øu c√≥, c·∫ßn l·∫•y element cha .puzzle-piece
        currentDraggingPiece = e.target.closest('.puzzle-piece');
        if (!currentDraggingPiece) return;

        currentDraggingPiece.classList.add('dragging');
        const rect = currentDraggingPiece.getBoundingClientRect();
        const containerRect = puzzleContainer.getBoundingClientRect(); // L·∫•y rect c·ªßa container
        offsetX = e.clientX - rect.left;
        offsetY = e.clientY - rect.top;

        // ƒê·∫∑t l·∫°i v·ªã tr√≠ k√©o b·∫±ng c√°ch s·ª≠ d·ª•ng position absolute v√† top/left
        currentDraggingPiece.style.position = 'absolute';
        currentDraggingPiece.style.zIndex = 100; // ƒê·∫£m b·∫£o m·∫£nh gh√©p ƒëang k√©o n·∫±m tr√™n c√πng

    }

    function onMouseMove(e) {
        if (!currentDraggingPiece) return;
        const containerRect = puzzleContainer.getBoundingClientRect();
        let newLeft = e.clientX - containerRect.left - offsetX;
        let newTop = e.clientY - containerRect.top - offsetY;

        // Gi·ªõi h·∫°n di chuy·ªÉn trong ph·∫°m vi container
        newLeft = Math.max(0, Math.min(newLeft, containerRect.width - currentDraggingPiece.offsetWidth));
        newTop = Math.max(0, Math.min(newTop, containerRect.height - currentDraggingPiece.offsetHeight));

        currentDraggingPiece.style.left = `${newLeft}px`;
        currentDraggingPiece.style.top = `${newTop}px`;
    }

    function onMouseUp() {
        if (!currentDraggingPiece) return;

        currentDraggingPiece.classList.remove('dragging');
        currentDraggingPiece.style.zIndex = ''; // Reset z-index
        snapPieceToGrid(currentDraggingPiece);
        currentDraggingPiece = null;

        if (checkWin()) {
            showSolvedOverlay();
        }
    }

     function onTouchStart(e) {
         // e.target c√≥ th·ªÉ l√† <img> n·∫øu c√≥, c·∫ßn l·∫•y element cha .puzzle-piece
        currentDraggingPiece = e.target.closest('.puzzle-piece');
        if (!currentDraggingPiece) return;

        currentDraggingPiece.classList.add('dragging');
        const rect = currentDraggingPiece.getBoundingClientRect();
        const touch = e.touches[0];
        const containerRect = puzzleContainer.getBoundingClientRect(); // L·∫•y rect c·ªßa container

        offsetX = touch.clientX - rect.left;
        offsetY = touch.clientY - rect.top;

        // ƒê·∫∑t l·∫°i v·ªã tr√≠ k√©o b·∫±ng c√°ch s·ª≠ d·ª•ng position absolute v√† top/left
        currentDraggingPiece.style.position = 'absolute';
        currentDraggingPiece.style.zIndex = 100; // ƒê·∫£m b·∫£o m·∫£nh gh√©p ƒëang k√©o n·∫±m tr√™n c√πng

        e.preventDefault(); // NgƒÉn cu·ªôn trang khi b·∫Øt ƒë·∫ßu k√©o
    }

    function onTouchMove(e) {
        if (!currentDraggingPiece) return;
        const containerRect = puzzleContainer.getBoundingClientRect();
        const touch = e.touches[0];
        let newLeft = touch.clientX - containerRect.left - offsetX;
        let newTop = touch.clientY - containerRect.top - offsetY;

        // Gi·ªõi h·∫°n di chuy·ªÉn trong ph·∫°m vi container
        newLeft = Math.max(0, Math.min(newLeft, containerRect.width - currentDraggingPiece.offsetWidth));
        newTop = Math.max(0, Math.min(newTop, containerRect.height - currentDraggingPiece.offsetHeight));

        currentDraggingPiece.style.left = `${newLeft}px`;
        currentDraggingPiece.style.top = `${newTop}px`;
        e.preventDefault(); // NgƒÉn cu·ªôn trang khi ƒëang k√©o
    }

     function onTouchEnd() {
        if (!currentDraggingPiece) return;
        currentDraggingPiece.classList.remove('dragging');
        currentDraggingPiece.style.zIndex = ''; // Reset z-index
        snapPieceToGrid(currentDraggingPiece);
        currentDraggingPiece = null;

        if (checkWin()) {
            showSolvedOverlay();
        }
    }

    // Snap m·∫£nh gh√©p v·ªÅ v·ªã tr√≠ l∆∞·ªõi g·∫ßn nh·∫•t ho·∫∑c ho√°n ƒë·ªïi v·ªã tr√≠
    function snapPieceToGrid(piece) {
        const containerRect = puzzleContainer.getBoundingClientRect();
        const pieceWidth = containerRect.width / cols;
        const pieceHeight = containerRect.height / rows;

        const currentLeft = parseFloat(piece.style.left);
        const currentTop = parseFloat(piece.style.top);

        // T√≠nh to√°n v·ªã tr√≠ l∆∞·ªõi g·∫ßn nh·∫•t m√† t√¢m m·∫£nh gh√©p ƒë∆∞·ª£c th·∫£ v√†o
        const pieceCenterX = currentLeft + piece.offsetWidth / 2;
        const pieceCenterY = currentTop + piece.offsetHeight / 2;

        const targetCol = Math.floor(pieceCenterX / pieceWidth);
        const targetRow = Math.floor(pieceCenterY / pieceHeight);

        // Ki·ªÉm tra n·∫øu v·ªã tr√≠ ƒë√≠ch n·∫±m ngo√†i l∆∞·ªõi (kh√¥ng n√™n x·∫£y ra v·ªõi gi·ªõi h·∫°n di chuy·ªÉn)
        if (targetRow < 0 || targetRow >= rows || targetCol < 0 || targetCol >= cols) {
             // ƒê·∫∑t l·∫°i v·ªã tr√≠ v·ªÅ v·ªã tr√≠ hi·ªán t·∫°i trong m·∫£ng n·∫øu n·∫±m ngo√†i l∆∞·ªõi
            const currentIndexInArray = pieces.indexOf(piece);
            const currentRowInArray = Math.floor(currentIndexInArray / cols);
            const currentColInArray = currentIndexInArray % cols;
             piece.style.left = `${currentColInArray * pieceWidth}px`;
             piece.style.top = `${currentRowInArray * pieceHeight}px`;
            return;
        }

        // T√≠nh to√°n ch·ªâ s·ªë ƒë√≠ch trong m·∫£ng 1D d·ª±a tr√™n v·ªã tr√≠ l∆∞·ªõi
        const targetIndex = targetRow * cols + targetCol;

         // T√¨m m·∫£nh gh√©p (n·∫øu c√≥) hi·ªán ƒëang ·ªü v·ªã tr√≠ ƒë√≠ch trong M·∫¢NG pieces
         // Ta c·∫ßn t√¨m m·∫£nh gh√©p trong m·∫£ng pieces m√† v·ªã tr√≠ HI·ªÇN TH·ªä c·ªßa n√≥ kh·ªõp v·ªõi v·ªã tr√≠ l∆∞·ªõi ƒë√≠ch.
         // Duy·ªát qua m·∫£ng pieces v√† ki·ªÉm tra v·ªã tr√≠ hi·ªÉn th·ªã
        let pieceAtTargetPosition = null;
        for (let i = 0; i < pieces.length; i++) {
            const p = pieces[i];
            if (p === piece) continue; // B·ªè qua ch√≠nh m·∫£nh gh√©p ƒëang k√©o

            const pLeft = parseFloat(p.style.left);
            const pTop = parseFloat(p.style.top);

            // Ki·ªÉm tra xem v·ªã tr√≠ hi·ªÉn th·ªã c·ªßa m·∫£nh gh√©p p c√≥ kh·ªõp v·ªõi v·ªã tr√≠ l∆∞·ªõi ƒë√≠ch kh√¥ng
            // C·∫ßn so s√°nh v·ªõi m·ªôt sai s·ªë nh·ªè do t√≠nh to√°n float
            const epsilon = 1; // Sai s·ªë ch·∫•p nh·∫≠n ƒë∆∞·ª£c (pixels)
            const isAtTarget = Math.abs(pLeft - targetCol * pieceWidth) < epsilon &&
                               Math.abs(pTop - targetRow * pieceHeight) < epsilon;

            if (isAtTarget) {
                pieceAtTargetPosition = p;
                break; // T√¨m th·∫•y m·∫£nh gh√©p ·ªü v·ªã tr√≠ ƒë√≠ch
            }
        }


        if (pieceAtTargetPosition) {
             // N·∫øu c√≥ m·∫£nh gh√©p kh√°c ·ªü v·ªã tr√≠ ƒë√≠ch, ho√°n ƒë·ªïi v·ªã tr√≠ trong m·∫£ng pieces
            const currentIndex = pieces.indexOf(piece);
            const targetIndexInArray = pieces.indexOf(pieceAtTargetPosition);

             [pieces[currentIndex], pieces[targetIndexInArray]] = [pieces[targetIndexInArray], pieces[currentIndex]];

            // C·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ hi·ªÉn th·ªã c·ªßa c·∫£ hai m·∫£nh gh√©p
            updatePiecePositions();

        } else {
            // N·∫øu √¥ ƒë√≠ch tr·ªëng, ch·ªâ ƒë·∫∑t m·∫£nh gh√©p hi·ªán t·∫°i v√†o v·ªã tr√≠ l∆∞·ªõi ƒë√≥
            // T√¨m v·ªã tr√≠ hi·ªán t·∫°i c·ªßa m·∫£nh gh√©p trong m·∫£ng pieces
            const currentIndex = pieces.indexOf(piece);
             // T·∫°m th·ªùi x√≥a m·∫£nh gh√©p kh·ªèi v·ªã tr√≠ hi·ªán t·∫°i trong m·∫£ng
            const [movedPiece] = pieces.splice(currentIndex, 1);
             // Ch√®n m·∫£nh gh√©p v√†o v·ªã tr√≠ ƒë√≠ch m·ªõi trong m·∫£ng
            pieces.splice(targetIndex, 0, movedPiece);

            // C·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ hi·ªÉn th·ªã d·ª±a tr√™n m·∫£ng pieces ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
             updatePiecePositions();
        }

    }


    // Kh·ªüi t·∫°o tr√≤ ch∆°i
    function initializeGame() {
        createPieces();
        shufflePieces(pieces);
        // Kh√¥ng c·∫ßn updatePiecePositions ·ªü ƒë√¢y n·ªØa v√¨ shufflePieces g·ªçi n√≥
        addDragListeners();
    }

    // Kh·ªüi t·∫°o khi trang load
    initializeGame();

     // C·∫≠p nh·∫≠t v·ªã tr√≠ m·∫£nh gh√©p khi resize c·ª≠a s·ªï
    window.addEventListener('resize', updatePiecePositions);
});
